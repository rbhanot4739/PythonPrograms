NOTE: If you put `--` i.e two dashes after the actual git command/subcommand it will impact only that file. This pretty special and can be handy in lot of cases
Examples
git checkout <branch/commit> -- filename : Checkout only this particular file from the branch/commit
git log -- filename : Show only those log enteries which contain this filename
git diff -- filename : show git diff only for this file.
This list can go on...

1. git diff - 
			shows only the unstaged changes
		- Once the changes have been staged, git diff won't show it

2.	git diff --cached/staged
			shows the changes that have been staged but not yet committed


Undoing Changes

From working area --------

3.	git rm
			 deletes the file from git staging area as well as removes from working tree

		git checkout -- <file>
			This will undo the change in the working directory for that file. Using a `.` in place of file will undo changes for all files.

From staging area ---------
4.	git rm --cached
			removes the file only from the git staging area but not from working tree

		git reset HEAD <file>
			This will undo the change in the staging area for that file. Using a `.` in place of file will undo changes for all files.


git reset --mixed <commit-hash>
git reset --mixed HEAD^^ 	- (default is --mixed)
		this resets the HEAD to the commit you mentioned and puts the changes from current commit into working direcory as "Untracked Changes"

git reset --soft <commit-hash>
	git reset --soft HEAD^ or HEAD~1
		this resets the HEAD to the commit you mentioned and puts the changes from current commit int the staging as "Unstaged Changes"

git reset --hard <commit-hash>
git reset --hard HEAD~1
		resets the HEAD and erases the data as well - all changes will be lost - Dangerous command - be careful

		HEAD~[n] : moves the HEAD to nth previous commit, so HEAD~2 moves the HEAD to HEAD-2 commit id
		HEAD^ - moves the HEAD to HEAD's parent i.e. one node up
		HEAD^^ - moves the HEAD to HEAD's grand parent, i.e. two nodes up
		.. so on

5.	git mv
			 renames the file and automatically stages it as well. otherwise if you rename the file using `mv` command then you'll have to unstage the old name file and stage the new named file

6.		:wq



----------------------
.git/
	
objects/ - this contains the blobs(actual file snapshots)
					 - tree objects which contains pointers to blob objects
					 - acutal commit objects which points to tree objects

			git cat-file commit <commit hash> - to see the contents of commit object n see the tree object
			git ls-tree <tree object hash>/<commit hash> - to see the blob objects
			git cat-file blob <blob hash> - to see the contents from snapshot at that point of time


refs/ - this contains the branch pointers



git log version2 ^master 
		- commits which are in version2 branch but not in master

git log -p
			- shows the patch 

git log --stat
			 shows what files changed


git cherry-pick <commit>
		- copies the the commit with the commit-id to the current branch you are on

git commit --amend -m "msg"
			- this modifies the commit msg but SAME commit hash

git remote show origin
		- shows information about the remote
		git remote show origin                 
* remote origin
  Fetch URL: git@gitlab.tower-research.com:rbhanot/cfengine-config-service.git
  Push  URL: git@gitlab.tower-research.com:rbhanot/cfengine-config-service.git
  HEAD branch: master
  Remote branches:
    master   tracked
    version2 tracked
  Local branches configured for 'git pull':
    master   merges with remote master
    version2 merges with remote version2
  Local refs configured for 'git push':
    master   pushes to master   (up to date)
    version2 pushes to version2 (up to date)


-- setting a local branch tracking remote branch
		git push --set-upstream origin version2
		git push --set-upstream origin master
		

-- Creating alias for git commands
git config --global alias.co checkout


git rev-parse --abbrev-ref HEAD # get branch name of current 
git rev-parse  HEAD  # get commit has of current latest commit
git rev-parse HEAD~6		# get commit has of the 6th last commit
